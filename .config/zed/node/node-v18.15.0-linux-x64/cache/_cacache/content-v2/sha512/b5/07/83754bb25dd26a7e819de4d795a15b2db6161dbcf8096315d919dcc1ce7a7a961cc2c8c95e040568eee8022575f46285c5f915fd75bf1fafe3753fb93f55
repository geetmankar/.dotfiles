{"_id":"vscode-json-languageserver","_rev":"89-ad532c4953f078a8655bb732f8de1e34","name":"vscode-json-languageserver","dist-tags":{"next":"1.0.0-next.3","latest":"1.3.4"},"versions":{"1.0.0-next.1":{"name":"vscode-json-languageserver","description":"JSON language server","version":"1.0.0-next.1","author":{"name":"Microsoft Corporation"},"license":"MIT","engines":{"node":"*"},"dependencies":{"jsonc-parser":"^2.0.0-next.1","request-light":"^0.2.2","vscode-json-languageservice":"^3.0.12","vscode-languageserver":"^4.0.0","vscode-nls":"^3.2.2","vscode-uri":"^1.0.3"},"devDependencies":{"@types/node":"7.0.43","@types/mocha":"2.2.33"},"scripts":{"prepublishOnly":"npm run clean && npm run test","preversion":"npm test","postversion":"git push && git push --tags","compile":"gulp compile-extension:json-language-features-server","watch":"gulp watch-extension:json-language-features-server","clean":"../../../node_modules/.bin/rimraf out","install-service-next":"yarn add vscode-json-languageservice@next","install-service-local":"yarn link vscode-json-languageservice","install-server-next":"yarn add vscode-languageserver@next","install-server-local":"yarn link vscode-languageserver-server","test":"npm run compile && ../../../node_modules/.bin/mocha"},"_id":"vscode-json-languageserver@1.0.0-next.1","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"aeschli","email":"martinae@microsoft.com"},"dist":{"integrity":"sha512-CaQYI2sGdhcueHB7KUBhUShyQp9UBkuClxgT96GDPCh+W7sIylGkztRwIEw9PcF1oHxRODGGU/iVIUm6b0NC4g==","shasum":"778d036942791fe25a4d1879702859fa2079439b","tarball":"https://registry.npmjs.org/vscode-json-languageserver/-/vscode-json-languageserver-1.0.0-next.1.tgz","fileCount":10,"unpackedSize":45532,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIH7A75D/FX3g7eZIbcle4RBhYf+uVIlCvk2cf5rz7u6qAiBZKtKmCPw4kfMbcEPPMGcpJRJqJ2CaFuMPzU2fc3URLQ=="}]},"maintainers":[{"name":"aeschli","email":"martinae@microsoft.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/vscode-json-languageserver_1.0.0-next.1_1521625469703_0.30196105286056896"},"_hasShrinkwrap":false},"1.0.0-next.2":{"name":"vscode-json-languageserver","description":"JSON language server","version":"1.0.0-next.2","author":{"name":"Microsoft Corporation"},"license":"MIT","engines":{"node":"*"},"bin":{"vscode-json-languageserver":"./out/jsonServerMain.js"},"dependencies":{"jsonc-parser":"^2.0.0-next.1","request-light":"^0.2.2","vscode-json-languageservice":"^3.0.12","vscode-languageserver":"^4.0.0","vscode-nls":"^3.2.2","vscode-uri":"^1.0.3"},"devDependencies":{"@types/node":"7.0.43","@types/mocha":"2.2.33"},"scripts":{"prepublishOnly":"npm run clean && npm run test","preversion":"npm test","postversion":"git push && git push --tags","compile":"gulp compile-extension:json-language-features-server","watch":"gulp watch-extension:json-language-features-server","clean":"../../../node_modules/.bin/rimraf out","install-service-next":"yarn add vscode-json-languageservice@next","install-service-local":"yarn link vscode-json-languageservice","install-server-next":"yarn add vscode-languageserver@next","install-server-local":"yarn link vscode-languageserver-server","test":"npm run compile && ../../../node_modules/.bin/mocha"},"readme":"# VSCode JSON Language Server\n\n[![NPM Version](https://img.shields.io/npm/v/vscode-json-languageserver)](https://npmjs.org/package/vscode-json-languageserver)\n[![NPM Downloads](https://img.shields.io/npm/dm/vscode-json-languageserver)](https://npmjs.org/package/vscode-json-languageserver)\n\nThe JSON Language server provides language-specific smarts for editing, validating and understanding JSON documents. It runs as a separate executable and implements the [language server protocol](https://microsoft.github.io/language-server-protocol/overview) to be connected by any code editor or IDE.\n\n## Capabilities\n\n### Server capabilities\n\nThe JSON language server supports requests on documents of language id `json` and `jsonc`.\n- `json` documents are parsed and validated following the [JSON specification](https://tools.ietf.org/html/rfc7159).\n- `jsonc` documents additionally accept single line (`//`) and multi-line comments (`/* ... */`) and accepts trailing commas. JSONC is a VSCode specific file format, intended for VSCode configuration files, without any aspirations to define a new common file format.\n\nThe server implements the following capabilities of the language server protocol:\n\n- [Code completion](https://microsoft.github.io/language-server-protocol/specification#textDocument_completion) for JSON properties and values based on the document's [JSON schema](http://json-schema.org/) or based on existing properties and values used at other places in the document. JSON schemas are configured through the server configuration options.\n- [Hover](https://microsoft.github.io/language-server-protocol/specification#textDocument_hover) for values based on descriptions in the document's [JSON schema](http://json-schema.org/).\n- [Document Symbols](https://microsoft.github.io/language-server-protocol/specification#textDocument_documentSymbol) for quick navigation to properties in the document\n- [Document Colors](https://microsoft.github.io/language-server-protocol/specification#textDocument_documentColor) for showing color decorators on values representing colors and [Color Presentation](https://microsoft.github.io/language-server-protocol/specification#textDocument_colorPresentation) for color presentation information to support color pickers. The location of colors is defined by the document's [JSON schema](http://json-schema.org/). All values marked with `\"format\": \"color-hex\"` (VSCode specific, non-standard JSON Schema extension) are considered color values. The supported color formats are `#rgb[a]` and `#rrggbb[aa]`.\n- [Code Formatting](https://microsoft.github.io/language-server-protocol/specification#textDocument_rangeFormatting) supporting ranges and formatting the whole document.\n- [Diagnostics (Validation)](https://microsoft.github.io/language-server-protocol/specification#textDocument_publishDiagnostics) are pushed for all open documents\n   - syntax errors\n   - structural validation based on the document's [JSON schema](http://json-schema.org/).\n\nIn order to load JSON schemas, the JSON server uses NodeJS `http` and `fs` modules. For all other features, the JSON server only relies on the documents and settings provided by the client through the LSP.\n\n### Client requirements:\n\nThe JSON language server expects the client to only send requests and notifications for documents of language id `json` and `jsonc`.\n\nThe JSON language server has the following dependencies on the client's capabilities:\n\n- Code completion requires that the client capability has *snippetSupport*. If not supported by the client, the server will not offer the completion capability.\n- Formatting support requires the client to support *dynamicRegistration* for *rangeFormatting*. If not supported by the client, the server will not offer the format capability.\n\n## Configuration\n\n### Settings\n\nClients may send a `workspace/didChangeConfiguration` notification to notify the server of settings changes.\nThe server supports the following settings:\n\n- http\n   - `proxy`: The URL of the proxy server to use when fetching schema. When undefined or empty, no proxy is used.\n   - `proxyStrictSSL`: Whether the proxy server certificate should be verified against the list of supplied CAs.\n\n- json\n  - `format`\n    - `enable`: Whether the server should register the formatting support. This option is only applicable if the client supports *dynamicRegistration* for *rangeFormatting*\n    - `schema`: Configures association of file names to schema URL or schemas and/or associations of schema URL to schema content.\n\t  - `fileMatch`: an array or file names or paths (separated by `/`). `*` can be used as a wildcard.\n\t  - `url`: The URL of the schema, optional when also a schema is provided.\n\t  - `schema`: The schema content.\n\n```json\n\t{\n        \"http\": {\n            \"proxy\": \"\",\n            \"proxyStrictSSL\": true\n        },\n        \"json\": {\n            \"format\": {\n                \"enable\": true\n            },\n            \"schemas\": [\n                {\n                    \"fileMatch\": [\n                        \"foo.json\",\n                        \"*.superfoo.json\"\n                    ],\n                    \"url\": \"http://json.schemastore.org/foo\",\n                    \"schema\": {\n                    \t\"type\": \"array\"\n                    }\n                }\n            ]\n        }\n    }\n```\n\n### Schema configuration and custom schema content delivery\n\n[JSON schemas](http://json-schema.org/) are essential for code assist, hovers, color decorators to work and are required for structural validation.\n\nTo find the schema for a given JSON document, the server uses the following mechanisms:\n- JSON documents can define the schema URL using a `$schema` property\n- The settings define a schema association based on the documents URL. Settings can either associate a schema URL to a file or path pattern, and they can directly provide a schema.\n- Additionally, schema associations can also be provided by a custom 'schemaAssociations' configuration call.\n\nSchemas are identified by URLs. To load the content of a schema, the JSON language server tries to load from that URL or path. The following URL schemas are supported:\n- `http`, `https`: Loaded using NodeJS's HTTP support. Proxies can be configured through the settings.\n- `file`: Loaded using NodeJS's `fs` support.\n- `vscode`: Loaded by an LSP call to the client.\n\n#### Schema associations notification\n\nIn addition to the settings, schemas associations can also be provided through a notification from the client to the server. This notification is a JSON language server specific, non-standardized, extension to the LSP.\n\nNotification:\n- method: 'json/schemaAssociations'\n- params: `ISchemaAssociations` defined as follows\n\n```ts\ninterface ISchemaAssociations {\n\t[pattern: string]: string[];\n}\n```\n  - keys: a file names or file path (separated by `/`). `*` can be used as a wildcard.\n  - values: An array of schema URLs\n\n#### Schema content request\n\nThe schema content for schema URLs that start with `vscode://` will be requested from the client through an LSP request. This request is a JSON language server specific, non-standardized, extension to the LSP.\n\nRequest:\n- method: 'vscode/content'\n- params: `string` - The schema URL to request. The server will only ask for URLs that start with `vscode://`\n- response: `string` - The content of the schema with the given URL\n\n#### Schema content change notification\n\nWhen the client is aware that a schema content has changed, it will notify the server through a notification. This notification is a JSON language server specific, non-standardized, extension to the LSP.\nThe server will, as a response, clear the schema content from the cache and reload the schema content when required again.\n\nNotification:\n- method: 'json/schemaContent'\n- params: `string` the URL of the schema that has changed.\n\n## Try\n\nThe JSON language server is shipped with [Visual Studio Code](https://code.visualstudio.com/) as part of the built-in VSCode extension `json-language-support`. The server is started when the first JSON file is opened. The [VSCode JSON documentation](https://code.visualstudio.com/docs/languages/json) for detailed information on the user experience and has more information on how to configure the language support.\n\n## Integrate\n\nIf you plan to integrate the JSON language server into an editor and IDE, check out [this page](https://microsoft.github.io/language-server-protocol/implementors/tools/) if there's already an LSP client integration available.\n\nYou can also launch the language server as a command and connect to it\nFor that, install the `json-language-server` npm module:\n\n`npm install -g json-language-server`\n\nStart the language server with the `json-language-server` command. Use a command line argument to specify the prefered communication channel:\n\n```\njson-language-server --node-ipc\njson-language-server --stdio\njson-language-server --socket=<port>\n```\n\nTo connect to the server from NodeJS, see Remy Suen's great write-up on [how to communicate with the server](https://github.com/rcjsuen/dockerfile-language-server-nodejs#communicating-with-the-server) through the available communication channels.\n\n## Participate\n\nThe source code of the JSON language server can be found [VSCode repository](https://github.com/Microsoft/vscode) at [extensions/json-language-features/server](https://github.com/Microsoft/vscode/tree/master/extensions/json-language-features/server).\nFile issues and pull requests in the [VSCode GitHub Issues](https://github.com/Microsoft/vscode/issues). See the document [How to Contribute](https://github.com/Microsoft/vscode/wiki/How-to-Contribute) on how to build and run from source.\n\nMost of the functionality of the server is located in libraries:\n- [jsonc-parser](https://github.com/Microsoft/node-jsonc-parser) contains the JSON parser and scanner\n- [vscode-json-languageservice](https://github.com/Microsoft/vscode-json-languageservice) contains the implementation of all features as a re-usable library.\n- [vscode-languageserver-node](https://github.com/Microsoft/vscode-languageserver-node) contains the implementation of language server for NodeJS.\n\nHelp on any of these projects is very welcome.\n\nPlease see also our [Code of Conduct](CODE_OF_CONDUCT.md).\n\n## License\n\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nLicensed under the [MIT](LICENSE.txt) License.\n","readmeFilename":"README.md","_id":"vscode-json-languageserver@1.0.0-next.2","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"aeschli","email":"martinae@microsoft.com"},"dist":{"integrity":"sha512-fERkyI1PlVBig8f90AGHz4NWsrjxy8VuyRlBGP+/Fcs8qNcfo5o+KWD97KIcfBP1sIMaBGR0N88OZ3gGyNvEHA==","shasum":"962b24fe4de591dc0b8076b271f6a9405fe1f385","tarball":"https://registry.npmjs.org/vscode-json-languageserver/-/vscode-json-languageserver-1.0.0-next.2.tgz","fileCount":9,"unpackedSize":45223,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCbgKi9NMrBBcfb+Ol4exkt1OSyA8js8j1Go8OteF5hOgIhAMFcX/6lUC2+9bp4jtO/JYJZZLvABvkQaVXoSVZ7cgNL"}]},"maintainers":[{"name":"aeschli","email":"martinae@microsoft.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/vscode-json-languageserver_1.0.0-next.2_1521627212183_0.31553585676066853"},"_hasShrinkwrap":false},"1.0.0-next.3":{"name":"vscode-json-languageserver","description":"JSON language server","version":"1.0.0-next.3","author":{"name":"Microsoft Corporation"},"license":"MIT","engines":{"node":"*"},"bin":{"vscode-json-languageserver":"./bin/vscode-json-languageserver"},"dependencies":{"jsonc-parser":"^2.0.0-next.1","request-light":"^0.2.2","vscode-json-languageservice":"^3.0.12","vscode-languageserver":"^4.0.0","vscode-nls":"^3.2.2","vscode-uri":"^1.0.3"},"devDependencies":{"@types/node":"7.0.43","@types/mocha":"2.2.33"},"scripts":{"prepublishOnly":"npm run clean && npm run test","preversion":"npm test","postversion":"git push && git push --tags","compile":"gulp compile-extension:json-language-features-server","watch":"gulp watch-extension:json-language-features-server","clean":"../../../node_modules/.bin/rimraf out","install-service-next":"yarn add vscode-json-languageservice@next","install-service-local":"yarn link vscode-json-languageservice","install-server-next":"yarn add vscode-languageserver@next","install-server-local":"yarn link vscode-languageserver-server","test":"npm run compile && ../../../node_modules/.bin/mocha"},"readme":"# VSCode JSON Language Server\n\n[![NPM Version](https://img.shields.io/npm/v/vscode-json-languageserver)](https://npmjs.org/package/vscode-json-languageserver)\n[![NPM Downloads](https://img.shields.io/npm/dm/vscode-json-languageserver)](https://npmjs.org/package/vscode-json-languageserver)\n\nThe JSON Language server provides language-specific smarts for editing, validating and understanding JSON documents. It runs as a separate executable and implements the [language server protocol](https://microsoft.github.io/language-server-protocol/overview) to be connected by any code editor or IDE.\n\n## Capabilities\n\n### Server capabilities\n\nThe JSON language server supports requests on documents of language id `json` and `jsonc`.\n- `json` documents are parsed and validated following the [JSON specification](https://tools.ietf.org/html/rfc7159).\n- `jsonc` documents additionally accept single line (`//`) and multi-line comments (`/* ... */`) and accepts trailing commas. JSONC is a VSCode specific file format, intended for VSCode configuration files, without any aspirations to define a new common file format.\n\nThe server implements the following capabilities of the language server protocol:\n\n- [Code completion](https://microsoft.github.io/language-server-protocol/specification#textDocument_completion) for JSON properties and values based on the document's [JSON schema](http://json-schema.org/) or based on existing properties and values used at other places in the document. JSON schemas are configured through the server configuration options.\n- [Hover](https://microsoft.github.io/language-server-protocol/specification#textDocument_hover) for values based on descriptions in the document's [JSON schema](http://json-schema.org/).\n- [Document Symbols](https://microsoft.github.io/language-server-protocol/specification#textDocument_documentSymbol) for quick navigation to properties in the document\n- [Document Colors](https://microsoft.github.io/language-server-protocol/specification#textDocument_documentColor) for showing color decorators on values representing colors and [Color Presentation](https://microsoft.github.io/language-server-protocol/specification#textDocument_colorPresentation) for color presentation information to support color pickers. The location of colors is defined by the document's [JSON schema](http://json-schema.org/). All values marked with `\"format\": \"color-hex\"` (VSCode specific, non-standard JSON Schema extension) are considered color values. The supported color formats are `#rgb[a]` and `#rrggbb[aa]`.\n- [Code Formatting](https://microsoft.github.io/language-server-protocol/specification#textDocument_rangeFormatting) supporting ranges and formatting the whole document.\n- [Diagnostics (Validation)](https://microsoft.github.io/language-server-protocol/specification#textDocument_publishDiagnostics) are pushed for all open documents\n   - syntax errors\n   - structural validation based on the document's [JSON schema](http://json-schema.org/).\n\nIn order to load JSON schemas, the JSON server uses NodeJS `http` and `fs` modules. For all other features, the JSON server only relies on the documents and settings provided by the client through the LSP.\n\n### Client requirements:\n\nThe JSON language server expects the client to only send requests and notifications for documents of language id `json` and `jsonc`.\n\nThe JSON language server has the following dependencies on the client's capabilities:\n\n- Code completion requires that the client capability has *snippetSupport*. If not supported by the client, the server will not offer the completion capability.\n- Formatting support requires the client to support *dynamicRegistration* for *rangeFormatting*. If not supported by the client, the server will not offer the format capability.\n\n## Configuration\n\n### Settings\n\nClients may send a `workspace/didChangeConfiguration` notification to notify the server of settings changes.\nThe server supports the following settings:\n\n- http\n   - `proxy`: The URL of the proxy server to use when fetching schema. When undefined or empty, no proxy is used.\n   - `proxyStrictSSL`: Whether the proxy server certificate should be verified against the list of supplied CAs.\n\n- json\n  - `format`\n    - `enable`: Whether the server should register the formatting support. This option is only applicable if the client supports *dynamicRegistration* for *rangeFormatting*\n    - `schema`: Configures association of file names to schema URL or schemas and/or associations of schema URL to schema content.\n\t  - `fileMatch`: an array or file names or paths (separated by `/`). `*` can be used as a wildcard.\n\t  - `url`: The URL of the schema, optional when also a schema is provided.\n\t  - `schema`: The schema content.\n\n```json\n\t{\n        \"http\": {\n            \"proxy\": \"\",\n            \"proxyStrictSSL\": true\n        },\n        \"json\": {\n            \"format\": {\n                \"enable\": true\n            },\n            \"schemas\": [\n                {\n                    \"fileMatch\": [\n                        \"foo.json\",\n                        \"*.superfoo.json\"\n                    ],\n                    \"url\": \"http://json.schemastore.org/foo\",\n                    \"schema\": {\n                    \t\"type\": \"array\"\n                    }\n                }\n            ]\n        }\n    }\n```\n\n### Schema configuration and custom schema content delivery\n\n[JSON schemas](http://json-schema.org/) are essential for code assist, hovers, color decorators to work and are required for structural validation.\n\nTo find the schema for a given JSON document, the server uses the following mechanisms:\n- JSON documents can define the schema URL using a `$schema` property\n- The settings define a schema association based on the documents URL. Settings can either associate a schema URL to a file or path pattern, and they can directly provide a schema.\n- Additionally, schema associations can also be provided by a custom 'schemaAssociations' configuration call.\n\nSchemas are identified by URLs. To load the content of a schema, the JSON language server tries to load from that URL or path. The following URL schemas are supported:\n- `http`, `https`: Loaded using NodeJS's HTTP support. Proxies can be configured through the settings.\n- `file`: Loaded using NodeJS's `fs` support.\n- `vscode`: Loaded by an LSP call to the client.\n\n#### Schema associations notification\n\nIn addition to the settings, schemas associations can also be provided through a notification from the client to the server. This notification is a JSON language server specific, non-standardized, extension to the LSP.\n\nNotification:\n- method: 'json/schemaAssociations'\n- params: `ISchemaAssociations` defined as follows\n\n```ts\ninterface ISchemaAssociations {\n\t[pattern: string]: string[];\n}\n```\n  - keys: a file names or file path (separated by `/`). `*` can be used as a wildcard.\n  - values: An array of schema URLs\n\n#### Schema content request\n\nThe schema content for schema URLs that start with `vscode://` will be requested from the client through an LSP request. This request is a JSON language server specific, non-standardized, extension to the LSP.\n\nRequest:\n- method: 'vscode/content'\n- params: `string` - The schema URL to request. The server will only ask for URLs that start with `vscode://`\n- response: `string` - The content of the schema with the given URL\n\n#### Schema content change notification\n\nWhen the client is aware that a schema content has changed, it will notify the server through a notification. This notification is a JSON language server specific, non-standardized, extension to the LSP.\nThe server will, as a response, clear the schema content from the cache and reload the schema content when required again.\n\nNotification:\n- method: 'json/schemaContent'\n- params: `string` the URL of the schema that has changed.\n\n## Try\n\nThe JSON language server is shipped with [Visual Studio Code](https://code.visualstudio.com/) as part of the built-in VSCode extension `json-language-support`. The server is started when the first JSON file is opened. The [VSCode JSON documentation](https://code.visualstudio.com/docs/languages/json) for detailed information on the user experience and has more information on how to configure the language support.\n\n## Integrate\n\nIf you plan to integrate the JSON language server into an editor and IDE, check out [this page](https://microsoft.github.io/language-server-protocol/implementors/tools/) if there's already an LSP client integration available.\n\nYou can also launch the language server as a command and connect to it\nFor that, install the `json-language-server` npm module:\n\n`npm install -g json-language-server`\n\nStart the language server with the `json-language-server` command. Use a command line argument to specify the prefered communication channel:\n\n```\njson-language-server --node-ipc\njson-language-server --stdio\njson-language-server --socket=<port>\n```\n\nTo connect to the server from NodeJS, see Remy Suen's great write-up on [how to communicate with the server](https://github.com/rcjsuen/dockerfile-language-server-nodejs#communicating-with-the-server) through the available communication channels.\n\n## Participate\n\nThe source code of the JSON language server can be found [VSCode repository](https://github.com/Microsoft/vscode) at [extensions/json-language-features/server](https://github.com/Microsoft/vscode/tree/master/extensions/json-language-features/server).\nFile issues and pull requests in the [VSCode GitHub Issues](https://github.com/Microsoft/vscode/issues). See the document [How to Contribute](https://github.com/Microsoft/vscode/wiki/How-to-Contribute) on how to build and run from source.\n\nMost of the functionality of the server is located in libraries:\n- [jsonc-parser](https://github.com/Microsoft/node-jsonc-parser) contains the JSON parser and scanner\n- [vscode-json-languageservice](https://github.com/Microsoft/vscode-json-languageservice) contains the implementation of all features as a re-usable library.\n- [vscode-languageserver-node](https://github.com/Microsoft/vscode-languageserver-node) contains the implementation of language server for NodeJS.\n\nHelp on any of these projects is very welcome.\n\nPlease see also our [Code of Conduct](CODE_OF_CONDUCT.md).\n\n## License\n\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nLicensed under the [MIT](LICENSE.txt) License.\n","readmeFilename":"README.md","_id":"vscode-json-languageserver@1.0.0-next.3","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"aeschli","email":"martinae@microsoft.com"},"dist":{"integrity":"sha512-754qFPioi8kvPi8GjtR/HNbZo95XTN4oyGicVRFnmwhh/iH/g/4vpNszdk0Bz4Au022iPRU8Qk+c7p3oawmvEg==","shasum":"3d9813ecb282b0068b6a302fadceedaae8c70a40","tarball":"https://registry.npmjs.org/vscode-json-languageserver/-/vscode-json-languageserver-1.0.0-next.3.tgz","fileCount":10,"unpackedSize":45638,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDsZFXgxskrv6OgAqAdG+k8EVWW4btz2iTBtdC1HfVCVwIgU6VPLQNMLfje1TPCFZ0T1DMU93xmjQJ71W1Ysyhsr0Q="}]},"maintainers":[{"name":"aeschli","email":"martinae@microsoft.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/vscode-json-languageserver_1.0.0-next.3_1521627598912_0.4628456635718057"},"_hasShrinkwrap":false},"1.0.0":{"name":"vscode-json-languageserver","description":"JSON language server","version":"1.0.0","author":{"name":"Microsoft Corporation"},"license":"MIT","engines":{"node":"*"},"bin":{"vscode-json-languageserver":"./bin/vscode-json-languageserver"},"dependencies":{"jsonc-parser":"^2.0.0-next.1","request-light":"^0.2.2","vscode-json-languageservice":"^3.0.12","vscode-languageserver":"^4.0.0","vscode-nls":"^3.2.2","vscode-uri":"^1.0.3"},"devDependencies":{"@types/node":"7.0.43","@types/mocha":"2.2.33"},"scripts":{"prepublishOnly":"npm run clean && npm run test","preversion":"npm test","compile":"gulp compile-extension:json-language-features-server","watch":"gulp watch-extension:json-language-features-server","clean":"../../../node_modules/.bin/rimraf out","install-service-next":"yarn add vscode-json-languageservice@next","install-service-local":"yarn link vscode-json-languageservice","install-server-next":"yarn add vscode-languageserver@next","install-server-local":"yarn link vscode-languageserver-server","test":"npm run compile && ../../../node_modules/.bin/mocha","version":"git commit -m \"JSON Language Server $npm_package_version\" package.json"},"_id":"vscode-json-languageserver@1.0.0","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"aeschli","email":"martinae@microsoft.com"},"dist":{"integrity":"sha512-Y0/Yhnhye65+jyZ4hMW/KkDE9mxKcv3bSijdRBkQW2x7vA5bbx6KIyl5u8hLEQVHF/IUZuHB/6x8bxT5JoF4WA==","shasum":"8e36c0c62f941c09c3870c64a05942b499a5b7c9","tarball":"https://registry.npmjs.org/vscode-json-languageserver/-/vscode-json-languageserver-1.0.0.tgz","fileCount":10,"unpackedSize":45671,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDyM7mCMQGwkHN8bCUr0Aavgg6alqI14MihlNAkJfsMyQIgRQTb/5BMwfHZzNtKpraU4hgpbK3Q8SYoN9WP2hdvbug="}]},"maintainers":[{"name":"aeschli","email":"martinae@microsoft.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/vscode-json-languageserver_1.0.0_1521644633059_0.19859368809977007"},"_hasShrinkwrap":false},"1.0.1":{"name":"vscode-json-languageserver","description":"JSON language server","version":"1.0.1","author":{"name":"Microsoft Corporation"},"license":"MIT","engines":{"node":"*"},"bin":{"vscode-json-languageserver":"./bin/vscode-json-languageserver"},"dependencies":{"jsonc-parser":"^2.0.0-next.1","request-light":"^0.2.2","vscode-json-languageservice":"^3.0.12","vscode-languageserver":"^4.0.0","vscode-nls":"^3.2.2","vscode-uri":"^1.0.3"},"devDependencies":{"@types/node":"7.0.43","@types/mocha":"2.2.33"},"scripts":{"prepublishOnly":"npm run clean && npm run test","preversion":"npm test","compile":"gulp compile-extension:json-language-features-server","watch":"gulp watch-extension:json-language-features-server","clean":"../../../node_modules/.bin/rimraf out","install-service-next":"yarn add vscode-json-languageservice@next","install-service-local":"yarn link vscode-json-languageservice","install-server-next":"yarn add vscode-languageserver@next","install-server-local":"yarn link vscode-languageserver-server","test":"npm run compile && ../../../node_modules/.bin/mocha","version":"git commit -m \"JSON Language Server $npm_package_version\" package.json"},"_id":"vscode-json-languageserver@1.0.1","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"aeschli","email":"martinae@microsoft.com"},"dist":{"integrity":"sha512-LuqcTsVy6VWwKXKOwBeLd3FCV6DD6Sw3RcKC7fV6o3Y6nD+AX7XKDr55NDjmgYqICH/TwCKlNdGIIjgpQU0SNQ==","shasum":"58bb0be82d816b50d71b3facfaffcae9a6587139","tarball":"https://registry.npmjs.org/vscode-json-languageserver/-/vscode-json-languageserver-1.0.1.tgz","fileCount":10,"unpackedSize":45815,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDZgeSzo4e5ibcyT3RERlWNI6MZSAKMKmVWTouc3b1xVAiEA072sxjZXrcT2FrQV96/fZSHocxAjXyg0AdUL2aAPt0E="}]},"maintainers":[{"name":"aeschli","email":"martinae@microsoft.com"},{"name":"alexandrudima","email":"alexdima@microsoft.com"},{"name":"bpasero","email":"benjpas@microsoft.com"},{"name":"chrisdias","email":"cdias@microsoft.com"},{"name":"dbaeumer","email":"dirk.baeumer@gmail.com"},{"name":"egamma","email":"egamma@microsoft.com"},{"name":"isidor","email":"inikolic@microsoft.com"},{"name":"joaomoreno.ms","email":"joao.moreno@microsoft.com"},{"name":"jrieken","email":"jrieken@microsoft.com"},{"name":"kaimaetzel","email":"kamaet@microsoft.com"},{"name":"microsoft","email":"npmjs@microsoft.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/vscode-json-languageserver_1.0.1_1521646036779_0.2653941464240879"},"_hasShrinkwrap":false},"1.2.0":{"name":"vscode-json-languageserver","description":"JSON language server","version":"1.2.0","author":{"name":"Microsoft Corporation"},"license":"MIT","engines":{"node":"*"},"bin":{"vscode-json-languageserver":"./bin/vscode-json-languageserver"},"main":"./out/jsonServerMain","dependencies":{"jsonc-parser":"^2.1.0","request-light":"^0.2.4","vscode-json-languageservice":"^3.3.0","vscode-languageserver":"^5.3.0-next.8","vscode-nls":"^4.1.1","vscode-uri":"^2.0.1"},"devDependencies":{"@types/mocha":"2.2.33","@types/node":"^10.14.8"},"scripts":{"prepublishOnly":"npm run clean && npm run test","preversion":"npm test","compile":"gulp compile-extension:json-language-features-server","watch":"gulp watch-extension:json-language-features-server","clean":"../../../node_modules/.bin/rimraf out","install-service-next":"yarn add vscode-json-languageservice@next","install-service-local":"yarn link vscode-json-languageservice","install-server-next":"yarn add vscode-languageserver@next","install-server-local":"yarn link vscode-languageserver-server","version":"git commit -m \"JSON Language Server $npm_package_version\" package.json"},"_id":"vscode-json-languageserver@1.2.0","_npmVersion":"6.4.1","_nodeVersion":"10.15.1","_npmUser":{"name":"aeschli","email":"martinae@microsoft.com"},"dist":{"integrity":"sha512-E3c/o4cOsPvWjBoFIXNF0QvQr7nfiu7TDezuaiuumjIyn5Ram6fBieyXWZjw4HGuzTMoCPGNT5RtJtuPdnRUFw==","shasum":"03a9815eeee97cd05fe2e1602a246ff9d4c9200a","tarball":"https://registry.npmjs.org/vscode-json-languageserver/-/vscode-json-languageserver-1.2.0.tgz","fileCount":5,"unpackedSize":20619,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdMYC8CRA9TVsSAnZWagAATw8P/1Q0IiRWTGezjr3UhSup\nymvysfO5lJjJHqcakibxsRwffLKQQdaoqEVDEPFQ7PiJ10eItcd11qSlY19o\n9KscujjlNq6NrmcHqGqWzsqtz02zFg1XXabbdz7l5PiJw9Bv9UssbELkKQvf\nBsVvarKlZvPgejZJvJjsIqsL8oSj/zTDQlpgGHZk1jW8n3WffVtp4sDl9Rcc\njLU7m2ZbRQJG7axaZgM0EmnDpR5kzUvXRqO4nnEEA77q1bPWBZlf74LyCY2O\n18X2GTof7lPAG0dzL65KyUtjUL62k8YyPXVkiZ39ioR8Xe8tDMRspiZ25tvn\nnlRsPjqglIRoOVJfsZn2iPfc1SHfrHwNxYblyLkdeyvplBEC5XnGWwYWnCDu\ny84wgIa3R+cA0hm20a41rjEtKTLTnXMQBp2v0Mtn7NW8AkXwUIL6o1Ei2ksR\nnKQyahCEpA0CfJIyU/NDUdxt5dNVr9uQLzReZrTbK17Av0FB2zuPptW10Wpy\nICfsya1veMHXgo1AbhqqjjIiwf6pr04kBHR3czISxeAzMBElmFSI8qV4/bR3\ncentPfxrq1yLXXhzTGfn7w5mM+sT+I/sPXXzia/j372c9zptI7Cg7GJqXXaW\n19L5/2hLz/p6hgOFUYjEsCQWOsbNrkesyIy2ZtfKJczVX6JqES1d/b5mF+ED\nRfWF\r\n=rvYB\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDC4E6KiuVrAEVGiYJjicuUDwGrYaOMFpUUmQTFwwRXBAIhAM0hOrZp6y8qS1fftDwLVoulgdFSRD2GoSRQAhspzgyT"}]},"maintainers":[{"email":"martinae@microsoft.com","name":"aeschli"},{"email":"alexdima@microsoft.com","name":"alexandrudima"},{"email":"benjpas@microsoft.com","name":"bpasero"},{"email":"cdias@microsoft.com","name":"chrisdias"},{"email":"dirk.baeumer@gmail.com","name":"dbaeumer"},{"email":"egamma@microsoft.com","name":"egamma"},{"email":"inikolic@microsoft.com","name":"isidor"},{"email":"joao.moreno@microsoft.com","name":"joaomoreno.ms"},{"email":"jrieken@microsoft.com","name":"jrieken"},{"email":"kamaet@microsoft.com","name":"kaimaetzel"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"octref@gmail.com","name":"octref"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/vscode-json-languageserver_1.2.0_1563525308141_0.5115222550469867"},"_hasShrinkwrap":false},"1.2.1":{"name":"vscode-json-languageserver","description":"JSON language server","version":"1.2.1","author":{"name":"Microsoft Corporation"},"license":"MIT","engines":{"node":"*"},"bin":{"vscode-json-languageserver":"./bin/vscode-json-languageserver"},"main":"./out/jsonServerMain","dependencies":{"jsonc-parser":"^2.1.0","request-light":"^0.2.4","vscode-json-languageservice":"^3.3.0","vscode-languageserver":"^5.3.0-next.8","vscode-nls":"^4.1.1","vscode-uri":"^2.0.1"},"devDependencies":{"@types/mocha":"2.2.33","@types/node":"^10.14.8"},"scripts":{"prepublishOnly":"npm run clean && npm run compile","compile":"npx gulp compile-extension:json-language-features-server","watch":"npx gulp watch-extension:json-language-features-server","clean":"../../../node_modules/.bin/rimraf out","install-service-next":"yarn add vscode-json-languageservice@next","install-service-local":"yarn link vscode-json-languageservice","install-server-next":"yarn add vscode-languageserver@next","install-server-local":"yarn link vscode-languageserver-server","version":"git commit -m \"JSON Language Server $npm_package_version\" package.json"},"_id":"vscode-json-languageserver@1.2.1","_npmVersion":"6.4.1","_nodeVersion":"10.15.1","_npmUser":{"name":"aeschli","email":"martinae@microsoft.com"},"dist":{"integrity":"sha512-JijXG0VRnnzqdNL3TyjDKiKoQ3IA3+0zd/+eyeyBW7fZpxM4oK/eHTLKHAwen6dYcXdrjJwx8XtT+LWls40esQ==","shasum":"c7b55d4c024036305f3dcc65bc14400f39d262e2","tarball":"https://registry.npmjs.org/vscode-json-languageserver/-/vscode-json-languageserver-1.2.1.tgz","fileCount":7,"unpackedSize":37151,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdNW8nCRA9TVsSAnZWagAA/xEP/iucPg1vyUUD4LOHzqFH\nsX09/oiI20So9RZxCszxUL1e9Rq4J1MBdqpApfcobAsUBLd7Uf/VjHtwTOsx\np6Og/vITnhc3u904K9eyxhOt6AGtd4YiVIBnSZc8XO6fB2OQACm5DGDPKg5D\naNphdtsO1wwbHw46XbMtiMaQCfsUHfR+7B3EAT3wyc/jbs+U2pSOOr99gjNH\nX6e1nJq0EoEZ5cQqMIXfwvh2m2IAC37gc99+ryMe43kAPZicsnu3+q7YlZX/\nbP/Q6L6lFx+nCUncnFcsZYiaOa001FM7y/EkxoLsuC/4+xF7sf39d0yI+GH7\nnCVpLvQ62inrPFC7OrXNc3wVhL/YuujurIWeHqLMPGxMzaMC1mFnSr7EqJr/\nfVSjuppdDh87kcIlUUM1Ow6VZD2ZGTte3oSjldUleMWTSBfdKkgdvQNH7M/r\ntLDgdwOgKm2napdHSGvPV58WETWLsVfNm3C+tfWC83hY2QBn8TxZuIgvJj32\nZUuwZdFhEA4f93AoQ/jFI8apLwv0oQIR1rkavBk/1tgvGy1rZF3mVmCGTEiQ\n9LqEzbmVfF8PyssnmtEUc+qX/s9OT5fJOC3omIomDeFuJFOZQz+7tPYM6uYi\nnH6pFBuwZzu7jFvoC6J0SwmhoS1VTReIKVWjeAASmDeb+e5ujIk8Q6jDvdRw\nnNNi\r\n=KWz+\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDLWnYj5zy/7vdzSuFZjd4RozJph6PtZW5H4N7crPgpoQIgEYhpw4ur7VwK4DErnr6Fc19Egxw3FhULPK9c2+zkJ7Y="}]},"maintainers":[{"email":"martinae@microsoft.com","name":"aeschli"},{"email":"alexdima@microsoft.com","name":"alexandrudima"},{"email":"benjpas@microsoft.com","name":"bpasero"},{"email":"cdias@microsoft.com","name":"chrisdias"},{"email":"dirk.baeumer@gmail.com","name":"dbaeumer"},{"email":"egamma@microsoft.com","name":"egamma"},{"email":"inikolic@microsoft.com","name":"isidor"},{"email":"joao.moreno@microsoft.com","name":"joaomoreno.ms"},{"email":"jrieken@microsoft.com","name":"jrieken"},{"email":"kamaet@microsoft.com","name":"kaimaetzel"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"octref@gmail.com","name":"octref"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/vscode-json-languageserver_1.2.1_1563782950322_0.0916869432108911"},"_hasShrinkwrap":false},"1.2.2":{"name":"vscode-json-languageserver","description":"JSON language server","version":"1.2.2","author":{"name":"Microsoft Corporation"},"license":"MIT","engines":{"node":"*"},"bin":{"vscode-json-languageserver":"./bin/vscode-json-languageserver"},"main":"./out/jsonServerMain","dependencies":{"jsonc-parser":"^2.1.1","request-light":"^0.2.4","vscode-json-languageservice":"^3.3.5","vscode-languageserver":"^6.0.0-next.1","vscode-nls":"^4.1.1","vscode-uri":"^2.0.3"},"devDependencies":{"@types/mocha":"2.2.33","@types/node":"^10.14.8"},"scripts":{"prepublishOnly":"npm run clean && npm run compile","compile":"npx gulp compile-extension:json-language-features-server","watch":"npx gulp watch-extension:json-language-features-server","clean":"../../../node_modules/.bin/rimraf out","install-service-next":"yarn add vscode-json-languageservice@next","install-service-local":"yarn link vscode-json-languageservice","install-server-next":"yarn add vscode-languageserver@next","install-server-local":"yarn link vscode-languageserver-server","version":"git commit -m \"JSON Language Server $npm_package_version\" package.json"},"_id":"vscode-json-languageserver@1.2.2","_npmVersion":"6.4.1","_nodeVersion":"10.15.1","_npmUser":{"name":"aeschli","email":"martinae@microsoft.com"},"dist":{"integrity":"sha512-oHOFcYJrWFTpS8fz6yRywHw7qNzuOvwhe4ocpwGxTWFvvTZWCXeGhpX6XO6OXh53Aad69qIKWEflza3/N/0h2A==","shasum":"d07c27a7fe95be9a6a3174f4792dc884b3430e9c","tarball":"https://registry.npmjs.org/vscode-json-languageserver/-/vscode-json-languageserver-1.2.2.tgz","fileCount":7,"unpackedSize":38070,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdnt1OCRA9TVsSAnZWagAAMDUP/3NfgqpMKepTR2Khw3Gk\nbm6dkxFtPIZMExiuCC7OF6lT1cQ5QT7oqQZrCbA7z4+FQYkqAcLHCeUjeIx4\nBlSBSn64opahSvYrkBBZ86vOWvlZXUAe7DSCle1xOSgk4THo4+2SlvJhWCH4\nF6Pq2tZ/MdzqVXA+n+MTBiaWZev1J6YVXxgI1nNUDMxu+DPKPnfrWz9MvdxJ\nkR8+86cZsMUJD/HQuEweB2U4g6UvHjXv+70WQCtTai/pFHqeRC2/L/xi1dpe\n6fqwrOhJJdi3MA6UYHINB8x3ZlziXiBRqeXBw/B+gCNYq35ugtsupGHuQHUb\nTIimx70b+MHLsBr6IRxMZUp2brnVlx6gJ2BcYODxBfP5WxSGMNczqGicss6t\nSlfXJZOZPAtJ03FC5IUOZlUnuTP4XSaqcID0B/1xediFFlh+1uMQddbfKEGu\nlkoUof3dzLdoueTukP+p8qL7b5Tke8T0xEspSUqIN0UXwk2FXxuoSbLMziIs\nqI9CDlfrvs/orLB3x8fF3iMqIQXrXnDb7gND/UwCPcm+XFK/h4EKLH6FIJgv\ncoNZYMiMXntgXoH0utPnQXNQhapq1hATeTT3CdN5cBhZcCK+q+J0uCYD0OwU\nPqlUDLtsbSuLsUTjF2bQeCxuUDraLCNXI3x3w4+L2Bx7W+TI1mVQujcq6Et8\nkEeN\r\n=HzZB\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGB3WTXUi74FNjBWeSJyfRwleHS7m2ke2AYWA7OzpbKNAiB79i8IhgRooGyfwMFhPd5TvXQekuE1cGV6+fSuGkRHHA=="}]},"maintainers":[{"email":"martinae@microsoft.com","name":"aeschli"},{"email":"alexdima@microsoft.com","name":"alexandrudima"},{"email":"benjpas@microsoft.com","name":"bpasero"},{"email":"cdias@microsoft.com","name":"chrisdias"},{"email":"dirk.baeumer@gmail.com","name":"dbaeumer"},{"email":"egamma@microsoft.com","name":"egamma"},{"email":"inikolic@microsoft.com","name":"isidor"},{"email":"joao.moreno@microsoft.com","name":"joaomoreno.ms"},{"email":"jrieken@microsoft.com","name":"jrieken"},{"email":"kamaet@microsoft.com","name":"kaimaetzel"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"octref@gmail.com","name":"octref"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/vscode-json-languageserver_1.2.2_1570692430121_0.40861533443563114"},"_hasShrinkwrap":false},"1.2.3":{"name":"vscode-json-languageserver","description":"JSON language server","version":"1.2.3","author":{"name":"Microsoft Corporation"},"license":"MIT","engines":{"node":"*"},"bin":{"vscode-json-languageserver":"./bin/vscode-json-languageserver"},"main":"./out/jsonServerMain","dependencies":{"jsonc-parser":"^2.2.0","request-light":"^0.2.5","vscode-json-languageservice":"^3.4.12","vscode-languageserver":"^6.0.1","vscode-uri":"^2.1.1"},"devDependencies":{"@types/mocha":"2.2.33","@types/node":"^12.11.7"},"scripts":{"prepublishOnly":"npm run clean && npm run compile","compile":"npx gulp compile-extension:json-language-features-server","watch":"npx gulp watch-extension:json-language-features-server","clean":"../../../node_modules/.bin/rimraf out","install-service-next":"yarn add vscode-json-languageservice@next","install-service-local":"yarn link vscode-json-languageservice","install-server-next":"yarn add vscode-languageserver@next","install-server-local":"yarn link vscode-languageserver-server","version":"git commit -m \"JSON Language Server $npm_package_version\" package.json"},"_id":"vscode-json-languageserver@1.2.3","_npmVersion":"6.4.1","_nodeVersion":"10.15.1","_npmUser":{"name":"aeschli","email":"martinae@microsoft.com"},"dist":{"integrity":"sha512-S8s2aN4ZQOUQnogQ15izgK8QsVBPcRewPv54dzmZsBPITKJuRcmQPPXfZcwz7z6Myf8zzKX7IslkwqcY3m0k0g==","shasum":"0f2894d28e8e818a79a22d1a179d74c2902c9d27","tarball":"https://registry.npmjs.org/vscode-json-languageserver/-/vscode-json-languageserver-1.2.3.tgz","fileCount":7,"unpackedSize":42034,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeSqqbCRA9TVsSAnZWagAAAH8P/2SCnn0dVo7rFh5/YBXT\njZYBJg6+0RcpHqV2XQjkcuRkG/+8p2gcQpNmk1juAcmH7Ns+wYqk14GeJnLA\njkvPpXiZIZgb7sxUUDaAov6ZGzaTWIng9R0yyh1bP3iR47Ls3EBsi0sFQEAe\nkb0ChOSjdAkRINSZ6zvZRI5oKK5aHfo8Wuhcc/tykNONgOyNJF3Tx2c3KNb+\n7DjXWqw3APoyhMbUXNVd24GZQ9fseV+nNUBwqFcUmrs1yEjVf7kvGIpgXpYX\ndHo6rc90c+uwH8UsyAty7E7H3EF2B6ESfkjJ09Zl6pzelIpjGwkpinRSg9yH\nnZEJNpW8vxbTyrK6iM89lK7Z2ZGOX6X4IOu2lPkuIgcfTMO4wHCx+H04dGzg\nvTUTpn+nRNI8IyyjWDzQC+wTCuPaRFaNF2Q6g5vyimc03kXhz8MD+LUcNPNo\nFQ6FPEz11ip1lvBhr+sXF9YtLQf9F8nXTL8crfOf2p+QJx6XuOyALe00Znrd\nO4/VF5qv6UQHtV6WrN0nOSbpNDfztG+0BgCR8cHbXuEmHAAh3uqMskDXN9LC\nNFPBJyC/OsAJu5aqFMXiF9msrWVtfLnpK2qpQlABkqwlb2au1kjHwJp0bR2U\nZYhtILJ1V1XEq8qiiF1flB6rsaThiTpYC0zAc6jbvKwNgh35mSIU9VYRzWgJ\n63YV\r\n=lbB8\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBw3GMNJzMni9qqQ0PcHdNUuiS398iMxKmBrllsLbFJOAiEAw8LRxtpg3RfvxwnWOt77cjeN2YzIsrmTcDFvRS/eE6w="}]},"maintainers":[{"email":"martinae@microsoft.com","name":"aeschli"},{"email":"alexdima@microsoft.com","name":"alexandrudima"},{"email":"benjpas@microsoft.com","name":"bpasero"},{"email":"cdias@microsoft.com","name":"chrisdias"},{"email":"dirk.baeumer@gmail.com","name":"dbaeumer"},{"email":"egamma@microsoft.com","name":"egamma"},{"email":"inikolic@microsoft.com","name":"isidor"},{"email":"joao.moreno@microsoft.com","name":"joaomoreno.ms"},{"email":"jrieken@microsoft.com","name":"jrieken"},{"email":"kamaet@microsoft.com","name":"kaimaetzel"},{"email":"npmjs@microsoft.com","name":"microsoft"},{"email":"octref@gmail.com","name":"octref"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/vscode-json-languageserver_1.2.3_1581951642611_0.635537318763256"},"_hasShrinkwrap":false},"1.3.0":{"name":"vscode-json-languageserver","description":"JSON language server","version":"1.3.0","author":{"name":"Microsoft Corporation"},"license":"MIT","engines":{"node":"*"},"bin":{"vscode-json-languageserver":"./bin/vscode-json-languageserver"},"main":"./out/node/jsonServerMain","dependencies":{"jsonc-parser":"^2.2.1","request-light":"^0.3.0","vscode-json-languageservice":"^3.8.4","vscode-languageserver":"7.0.0-next.3","vscode-uri":"^2.1.2"},"devDependencies":{"@types/mocha":"2.2.33","@types/node":"^12.11.7"},"scripts":{"prepublishOnly":"npm run clean && npm run compile","compile":"npx gulp compile-extension:json-language-features-server","watch":"npx gulp watch-extension:json-language-features-server","clean":"../../../node_modules/.bin/rimraf out","install-service-next":"yarn add vscode-json-languageservice@next","install-service-local":"yarn link vscode-json-languageservice","install-server-next":"yarn add vscode-languageserver@next","install-server-local":"yarn link vscode-languageserver-server","version":"git commit -m \"JSON Language Server $npm_package_version\" package.json"},"_id":"vscode-json-languageserver@1.3.0","_nodeVersion":"12.4.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-VTkYBSylaotPVExeKeuQ5wgRUaFhzkAF71hf1JuyoZLZ/OzjzQ5SdRmBlhXIQIWiqqmMu6NI9VHdyLnv1nY0zA==","shasum":"964de93354e94c460e484dc14561d29a9327b6e3","tarball":"https://registry.npmjs.org/vscode-json-languageserver/-/vscode-json-languageserver-1.3.0.tgz","fileCount":13,"unpackedSize":1644993,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfdio1CRA9TVsSAnZWagAAvNQQAJu9SvWPHqo32Wc+qI2q\n2IPV7lY2OzdU4VzP500WevnyNq9fflKPapU/kYy1nrQZxqk8w22LpZMm0ALi\nt5wqPhrc6uU7L+48+54MdutaikVbeFxu5mv0CrxgtU4+kj4mMh1PGtQIgEI7\nh6mAoSfBLFI6tU+yJ8fvEXEWooMpMiQrtjhJJ322lWxyvoeYCJVIslI+j6ZF\nyua9D9cQ8JRzYD2h/bggsyWcxUvOSqLwVnhDqTTTtgK0RAptmhMOKIPDQdGv\nKYCGM86YaNjMMVkt4U40tsn5d0fQHz+qmEmnPbsbixoFu94WBrAnNmHJ0xtC\n/joEzsngd+8VokSjzdPuXxJ0ctq/8VlB2CJbMQg9Hb1X2DzVISG8afqn0qov\nprJ3yLtS21uW2X0bkXgI6Q3JQB/anC5ZgB/AmQvuvdZUCJvq5+x/pAp1d6wv\nqe5Lqtpt0q752XwOoELhyeQVYHwnDBd+xsKA286mMJb/+O+fYfLkbWCK+arv\nE2LdxKliBp50EhmTuvHwArG9/2uGg7+/ftqsuVPBxhK0nAY/1/xSBqCODFgj\nlmpJZjo19mAg3ORAnKwZkYOrO1wQU59hdfYM7ildPvEwAw6XE2Ew/mbmtIuJ\nTQONjGuPlAhKNkKACOvBsXmaRZfYjQN6fzx+aeI8G2YOlPMT/nS5IUqQ9jAA\nvHYQ\r\n=PYra\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC4w0d7GjtJaYcEUmTjhlL7nsW7HME7TygV5goHJSu/8AIgCJlURJhsWcwHFg/u/J3D8KZAjcal/CQL1wDTmECtIkU="}]},"maintainers":[{"name":"microsoft","email":"npmjs@microsoft.com"},{"name":"jrieken","email":"jrieken@microsoft.com"},{"name":"egamma","email":"egamma@microsoft.com"},{"name":"chrisdias","email":"cdias@microsoft.com"},{"name":"alexandrudima","email":"alexdima@microsoft.com"},{"name":"aeschli","email":"martinae@microsoft.com"},{"name":"dbaeumer","email":"dirk.baeumer@gmail.com"},{"name":"bpasero","email":"benjpas@microsoft.com"},{"name":"isidor","email":"inikolic@microsoft.com"},{"name":"joaomoreno.ms","email":"joao.moreno@microsoft.com"},{"name":"kaimaetzel","email":"kamaet@microsoft.com"},{"name":"octref","email":"octref@gmail.com"}],"_npmUser":{"name":"aeschli","email":"martinae@microsoft.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/vscode-json-languageserver_1.3.0_1601579572522_0.7157919579786951"},"_hasShrinkwrap":false},"1.3.1":{"name":"vscode-json-languageserver","description":"JSON language server","version":"1.3.1","author":{"name":"Microsoft Corporation"},"license":"MIT","engines":{"node":"*"},"bin":{"vscode-json-languageserver":"./bin/vscode-json-languageserver"},"main":"./out/node/jsonServerMain","dependencies":{"jsonc-parser":"^2.2.1","request-light":"^0.3.0","vscode-json-languageservice":"^3.8.4","vscode-languageserver":"7.0.0-next.3","vscode-uri":"^2.1.2"},"devDependencies":{"@types/mocha":"2.2.33","@types/node":"^12.11.7"},"scripts":{"prepublishOnly":"npm run clean && npm run compile","compile":"npx gulp compile-extension:json-language-features-server","watch":"npx gulp watch-extension:json-language-features-server","clean":"../../../node_modules/.bin/rimraf out","install-service-next":"yarn add vscode-json-languageservice@next","install-service-local":"yarn link vscode-json-languageservice","install-server-next":"yarn add vscode-languageserver@next","install-server-local":"yarn link vscode-languageserver-server","version":"git commit -m \"JSON Language Server $npm_package_version\" package.json"},"_id":"vscode-json-languageserver@1.3.1","_nodeVersion":"12.4.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-yP75lCPSZVkFUfA0pUA9yKu2OumueIIaht5i9c7XVwwm08PMt1GMDI8RNv/fPkUjU9uBnb5bJW20BHxWBATgrA==","shasum":"69e1f83aee7e8dcdf91982ada77ca7f88831aebe","tarball":"https://registry.npmjs.org/vscode-json-languageserver/-/vscode-json-languageserver-1.3.1.tgz","fileCount":13,"unpackedSize":1644999,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfdyvuCRA9TVsSAnZWagAAROwP/2IdBDQANGu0bl9U3z2X\nqwLsm3XSDvRUz0jOFUvPjNUL9kkIVwqXA87YQswMY+WMaZxTcpT2HHkby8l3\nLQJYtmWmzKtpCdKx/8si4Ngv03y9k2meq/Yd4uAxwv3bBP3z73ODWtFh7+zX\nLwPLx7DoLNMMO51Q66ho/5+0qCJdpPZcaLSCZsd9vNv2PDT8gj/wXy0UECjI\nw7LYJeTz6dwb+OikLVy7gPJpj3GwL+hL5E6K6qskayznAyu/KZY6vOYNAwOv\ncNbBkRiohxes5jhlFmNOXbOiFqNcQDU2Qm9FbDJwcx953EcK+C4i2GVNItIa\nerbwuYVkkYBQ950KBUHt+haC8Q+2sAwIIOxCxNfFA33G+ZFb9ChgSffLD/vj\nSyFAskpD5+iCVQvM3QYupdvFGL7Es+vIQC788NYoW8XOcWEYFH4Z2iuj8faN\nu8kSLbFNr0YYyD2QePk4Fa3uN2n7QKiGF0E+Nymbf5uFgMlwpxWfUW5nm45K\nr1CWpNjOT/RjYivDEvqiGKbxnhbGkCQHw0PH8yYwCeFgtVa0CMHRWvSAviS+\nV2AKoLXhFqKT1wmz9VootvwbHWjDUo+dQR7qgt/+rEfCTMuOsZG5y74s4G0p\nQcz5OATmKonS8VgbFv0HHhhqvC/mvkexG2EfwFG0MEyfmFJQthCvN4yY3UON\niZ+9\r\n=AClA\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDuFxPWbzUPckCySGpeykUK6P2SKz9n0yspv1F9mF0xAwIhAOOshkcR8W3mM+oyAd3NbzpAMV8yLIb617RPUbGOem/0"}]},"maintainers":[{"name":"microsoft","email":"npmjs@microsoft.com"},{"name":"jrieken","email":"jrieken@microsoft.com"},{"name":"egamma","email":"egamma@microsoft.com"},{"name":"chrisdias","email":"cdias@microsoft.com"},{"name":"alexandrudima","email":"alexdima@microsoft.com"},{"name":"aeschli","email":"martinae@microsoft.com"},{"name":"dbaeumer","email":"dirk.baeumer@gmail.com"},{"name":"bpasero","email":"benjpas@microsoft.com"},{"name":"isidor","email":"inikolic@microsoft.com"},{"name":"joaomoreno.ms","email":"joao.moreno@microsoft.com"},{"name":"kaimaetzel","email":"kamaet@microsoft.com"},{"name":"octref","email":"octref@gmail.com"}],"_npmUser":{"name":"aeschli","email":"martinae@microsoft.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/vscode-json-languageserver_1.3.1_1601645542164_0.8178603792227743"},"_hasShrinkwrap":false},"1.3.4":{"name":"vscode-json-languageserver","description":"JSON language server","version":"1.3.4","author":{"name":"Microsoft Corporation"},"license":"MIT","engines":{"node":"*"},"bin":{"vscode-json-languageserver":"./bin/vscode-json-languageserver"},"main":"./out/node/jsonServerMain","dependencies":{"jsonc-parser":"^3.0.0","request-light":"^0.4.0","vscode-json-languageservice":"^4.0.2","vscode-languageserver":"^7.0.0","vscode-uri":"^3.0.2"},"devDependencies":{"@types/mocha":"^8.2.0","@types/node":"^12.19.9"},"scripts":{"prepublishOnly":"npm run clean && npm run compile","compile":"npx gulp compile-extension:json-language-features-server","watch":"npx gulp watch-extension:json-language-features-server","clean":"../../../node_modules/.bin/rimraf out","install-service-next":"yarn add vscode-json-languageservice@next","install-service-local":"yarn link vscode-json-languageservice","install-server-next":"yarn add vscode-languageserver@next","install-server-local":"yarn link vscode-languageserver-server","version":"git commit -m \"JSON Language Server $npm_package_version\" package.json"},"_id":"vscode-json-languageserver@1.3.4","_nodeVersion":"12.4.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-+ghebnslXk6fVDySBrT0BVqozLDdmKY/qxgkDD4JtOQcU2vXc3e7jh7YyMxvuvE93E9OLvBqUrvajttj8xf3BA==","shasum":"8b945d114caaef3c124306017d13e00b3bb1d2ef","tarball":"https://registry.npmjs.org/vscode-json-languageserver/-/vscode-json-languageserver-1.3.4.tgz","fileCount":11,"unpackedSize":51227,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgM7nZCRA9TVsSAnZWagAAhJIQAIOdzw2pqaAbAfOGOCzn\nXY0Amw98mtaLBstekIjL4ONz4Y1d62Zqka011M+WEOWDdiSAsx6KmENOKpYZ\ntBa6ZaCsL2SXQdw9o8E1RoX7DmbQkNYOW+C0/6ZjKN8YsLTdMwmOFv0HU2HL\nsuclYUM0yHIHJsSn6do5qD9ifechQ17AD9ABX2M8pi/9FX4w/xOdVuPzQ13t\nfbW6MXwub0gsv+XPgwsSGzWMsXl4Unq7SCpBU5JSHEXpHylaSvEY+FS85KF5\nQ51xvyQWloMCFMSXgM8j5lpnRlidiLb/UN7y6j2wizUP+aiA+HazCu042xMa\nXpCw2XQYjehUCFJjR3Cx9N8TbIEkQLlm8DmOUmSrUaDy+zCc8q9FizirBbgi\nG+4aLQo4vIGCDne6EPS5QbzZBQ5K3iodIVy6uaMOGF9JlJbo1W7O8yvpwym0\n2BHxYA+riIqcVr9xuG25RSTlGCTaX9TKdMQgCHahtPPOw2dDlUzTsL6IA4To\nNh+xxJP0y38zCFS2r7CsJwss4jhY4zv6Ke/Yl6HdbeoszMCyHt4N2v1qQc6b\nwap7lZH6ZH6eVz9qr4ZSFLhNLQy35LOkv+VukAJ5AY/cmr9iLsBfLLTJFss0\nafbFR3qyhS44NQtUGVEyVcwNuGsCTOiyD5c8vRMj7bmLijET6TzG5f25go3d\nCjsG\r\n=xcX8\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDr1Lb8L+6EDKN5AXdBuiMk5Eu/koKj4vr+kLRLeC0DvgIgVDg/RirS3gD1QeyHECFfeNrdFI2s8V0V70Pval/s7dE="}]},"_npmUser":{"name":"aeschli","email":"martinae@microsoft.com"},"directories":{},"maintainers":[{"name":"microsoft","email":"npmjs@microsoft.com"},{"name":"jrieken","email":"jrieken@microsoft.com"},{"name":"egamma","email":"egamma@microsoft.com"},{"name":"chrisdias","email":"cdias@microsoft.com"},{"name":"alexandrudima","email":"alexdima@microsoft.com"},{"name":"aeschli","email":"martinae@microsoft.com"},{"name":"dbaeumer","email":"dirk.baeumer@gmail.com"},{"name":"bpasero","email":"benjpas@microsoft.com"},{"name":"isidor","email":"inikolic@microsoft.com"},{"name":"joaomoreno.ms","email":"joao.moreno@microsoft.com"},{"name":"kaimaetzel","email":"kamaet@microsoft.com"},{"name":"octref","email":"octref@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/vscode-json-languageserver_1.3.4_1614002648300_0.9842558362302787"},"_hasShrinkwrap":false}},"time":{"created":"2018-03-21T09:44:29.703Z","1.0.0-next.1":"2018-03-21T09:44:29.810Z","modified":"2022-05-23T11:03:15.875Z","1.0.0-next.2":"2018-03-21T10:13:32.353Z","1.0.0-next.3":"2018-03-21T10:19:59.039Z","1.0.0":"2018-03-21T15:03:53.142Z","1.0.1":"2018-03-21T15:27:16.822Z","1.2.0":"2019-07-19T08:35:08.286Z","1.2.1":"2019-07-22T08:09:10.447Z","1.2.2":"2019-10-10T07:27:10.327Z","1.2.3":"2020-02-17T15:00:42.762Z","1.3.0":"2020-10-01T19:12:52.683Z","1.3.1":"2020-10-02T13:32:22.406Z","1.3.4":"2021-02-22T14:04:08.899Z"},"maintainers":[{"email":"octref@gmail.com","name":"octref"},{"email":"jrieken@microsoft.com","name":"jrieken"},{"email":"egamma@microsoft.com","name":"egamma"},{"email":"cdias@microsoft.com","name":"chrisdias"},{"email":"alexdima@microsoft.com","name":"alexandrudima"},{"email":"martinae@microsoft.com","name":"aeschli"},{"email":"dirk.baeumer@gmail.com","name":"dbaeumer"},{"email":"benjpas@microsoft.com","name":"bpasero"},{"email":"inikolic@microsoft.com","name":"isidor"},{"email":"joao.moreno@microsoft.com","name":"joaomoreno.ms"},{"email":"kamaet@microsoft.com","name":"kaimaetzel"}],"description":"JSON language server","author":{"name":"Microsoft Corporation"},"license":"MIT","readme":"# VSCode JSON Language Server\n\n[![NPM Version](https://img.shields.io/npm/v/vscode-json-languageserver.svg)](https://npmjs.org/package/vscode-json-languageserver)\n[![NPM Downloads](https://img.shields.io/npm/dm/vscode-json-languageserver.svg)](https://npmjs.org/package/vscode-json-languageserver)\n[![NPM Version](https://img.shields.io/npm/l/vscode-json-languageserver.svg)](https://npmjs.org/package/vscode-json-languageserver)\n\nThe JSON Language server provides language-specific smarts for editing, validating and understanding JSON documents. It runs as a separate executable and implements the [language server protocol](https://microsoft.github.io/language-server-protocol/overview) to be connected by any code editor or IDE.\n\n## Capabilities\n\n### Server capabilities\n\nThe JSON language server supports requests on documents of language id `json` and `jsonc`.\n- `json` documents are parsed and validated following the [JSON specification](https://tools.ietf.org/html/rfc7159).\n- `jsonc` documents additionally accept single line (`//`) and multi-line comments (`/* ... */`). JSONC is a VSCode specific file format, intended for VSCode configuration files, without any aspirations to define a new common file format.\n\nThe server implements the following capabilities of the language server protocol:\n\n- [Code completion](https://microsoft.github.io/language-server-protocol/specification#textDocument_completion) for JSON properties and values based on the document's [JSON schema](http://json-schema.org/) or based on existing properties and values used at other places in the document. JSON schemas are configured through the server configuration options.\n- [Hover](https://microsoft.github.io/language-server-protocol/specification#textDocument_hover) for values based on descriptions in the document's [JSON schema](http://json-schema.org/).\n- [Document Symbols](https://microsoft.github.io/language-server-protocol/specification#textDocument_documentSymbol) for quick navigation to properties in the document.\n- [Document Colors](https://microsoft.github.io/language-server-protocol/specification#textDocument_documentColor) for showing color decorators on values representing colors and [Color Presentation](https://microsoft.github.io/language-server-protocol/specification#textDocument_colorPresentation) for color presentation information to support color pickers. The location of colors is defined by the document's [JSON schema](http://json-schema.org/). All values marked with `\"format\": \"color-hex\"` (VSCode specific, non-standard JSON Schema extension) are considered color values. The supported color formats are `#rgb[a]` and `#rrggbb[aa]`.\n- [Code Formatting](https://microsoft.github.io/language-server-protocol/specification#textDocument_rangeFormatting) supporting ranges and formatting the whole document.\n- [Folding Ranges](https://microsoft.github.io/language-server-protocol/specification#textDocument_foldingRange) for all folding ranges in the document.\n- Semantic Selection for semantic selection for one or multiple cursor positions.\n- [Goto Definition](https://microsoft.github.io/language-server-protocol/specification#textDocument_definition) for $ref references in JSON schemas\n- [Diagnostics (Validation)](https://microsoft.github.io/language-server-protocol/specification#textDocument_publishDiagnostics) are pushed for all open documents\n   - syntax errors\n   - structural validation based on the document's [JSON schema](http://json-schema.org/).\n\nIn order to load JSON schemas, the JSON server uses NodeJS `http` and `fs` modules. For all other features, the JSON server only relies on the documents and settings provided by the client through the LSP.\n\n### Client requirements:\n\nThe JSON language server expects the client to only send requests and notifications for documents of language id `json` and `jsonc`.\n\nThe JSON language server has the following dependencies on the client's capabilities:\n\n- Code completion requires that the client capability has *snippetSupport*. If not supported by the client, the server will not offer the completion capability.\n- Formatting support requires the client to support *dynamicRegistration* for *rangeFormatting*. If not supported by the client, the server will not offer the format capability.\n\n## Configuration\n\n### Initialization options\n\nThe client can send the following initialization options to the server:\n\n- `provideFormatter: boolean | undefined`. If defined, the value defines whether the server provides the `documentRangeFormattingProvider` capability on initialization. If undefined, the setting `json.format.enable` is used to determine whether formatting is provided. The formatter will then be registered through dynamic registration. If the client does not support dynamic registration, no formatter will be available.\n- `handledSchemaProtocols`: The URI schemas handles by the server. See section `Schema configuration` below.\n- `customCapabilities`: Additional non-LSP client capabilities:\n  - `rangeFormatting: { editLimit: x } }`: For performance reasons, limit the number of edits returned by the range formatter to `x`.\n\n### Settings\n\nClients may send a `workspace/didChangeConfiguration` notification to notify the server of settings changes.\nThe server supports the following settings:\n\n- http\n   - `proxy`: The URL of the proxy server to use when fetching schema. When undefined or empty, no proxy is used.\n   - `proxyStrictSSL`: Whether the proxy server certificate should be verified against the list of supplied CAs.\n\n- json\n  - `format`\n    - `enable`: Whether the server should register the formatting support. This option is only applicable if the client supports *dynamicRegistration* for *rangeFormatting* and `initializationOptions.provideFormatter` is not defined.\n  - `schemas`: Configures association of file names to schema URL or schemas and/or associations of schema URL to schema content.\n    - `fileMatch`: an array of file names or paths (separated by `/`). `*` can be used as a wildcard. Exclusion patterns can also be defined and start with '!'. A file matches when there is at least one matching pattern and the last matching pattern is not an exclusion pattern.\n    - `url`: The URL of the schema, optional when also a schema is provided.\n    - `schema`: The schema content.\n  - `resultLimit`: The max number folding ranges and outline symbols to be computed (for performance reasons)\n\n```json\n    {\n        \"http\": {\n            \"proxy\": \"\",\n            \"proxyStrictSSL\": true\n        },\n        \"json\": {\n            \"format\": {\n                \"enable\": true\n            },\n            \"schemas\": [\n                {\n                    \"fileMatch\": [\n                        \"foo.json\",\n                        \"*.superfoo.json\"\n                    ],\n                    \"url\": \"http://json.schemastore.org/foo\",\n                    \"schema\": {\n                        \"type\": \"array\"\n                    }\n                }\n            ]\n        }\n    }\n```\n\n### Schema configuration and custom schema content delivery\n\n[JSON schemas](http://json-schema.org/) are essential for code assist, hovers, color decorators to work and are required for structural validation.\n\nTo find the schema for a given JSON document, the server uses the following mechanisms:\n- JSON documents can define the schema URL using a `$schema` property\n- The settings define a schema association based on the documents URL. Settings can either associate a schema URL to a file or path pattern, and they can directly provide a schema.\n- Additionally, schema associations can also be provided by a custom 'schemaAssociations' configuration call.\n\nSchemas are identified by URLs. To load the content of a schema, the JSON language server either tries to load from that URI or path itself or delegates to the client.\n\nThe `initializationOptions.handledSchemaProtocols` initialization option defines which URLs are handled by the server. Requests for all other URIs are sent to the client.\n\n`handledSchemaProtocols` is part of the initialization options and can't be changed while the server is running.\n\n```ts\nlet clientOptions: LanguageClientOptions = {\n\t\tinitializationOptions: {\n\t\t\thandledSchemaProtocols: ['file'] // language server should only try to load file URLs\n\t\t}\n        ...\n}\n```\n\nIf `handledSchemaProtocols` is not set, the JSON language server will load the following URLs itself:\n\n- `http`, `https`: Loaded using NodeJS's HTTP support. Proxies can be configured through the settings.\n- `file`: Loaded using NodeJS's `fs` support.\n\n#### Schema content request\n\nRequests for schemas with URLs not handled by the server are forwarded to the client through an LSP request. This request is a JSON language server-specific, non-standardized, extension to the LSP.\n\nRequest:\n- method: 'vscode/content'\n- params: `string` - The schema URL to request.\n- response: `string` - The content of the schema with the given URL\n\n#### Schema content change notification\n\nWhen the client is aware that a schema content has changed, it will notify the server through a notification. This notification is a JSON language server-specific, non-standardized, extension to the LSP.\nThe server will, as a response, clear the schema content from the cache and reload the schema content when required again.\n\n#### Schema associations notification\n\nIn addition to the settings, schemas associations can also be provided through a notification from the client to the server. This notification is a JSON language server-specific, non-standardized, extension to the LSP.\n\nNotification:\n- method: 'json/schemaAssociations'\n- params: `ISchemaAssociations` or `ISchemaAssociation[]` defined as follows\n\n```ts\ninterface ISchemaAssociations {\n  /**\n   * An object where:\n   *  - keys are file names or file paths (using `/` as path separator). `*` can be used as a wildcard.\n   *  - values are an arrays of schema URIs\n   */\n  [pattern: string]: string[];\n}\n\ninterface ISchemaAssociation {\n  /**\n   * The URI of the schema, which is also the identifier of the schema.\n   */\n  uri: string;\n\n  /**\n   * A list of file path patterns that are associated to the schema. The '*' wildcard can be used. Exclusion patterns starting with '!'.\n   * For example '*.schema.json', 'package.json', '!foo*.schema.json'.\n   * A match succeeds when there is at least one pattern matching and last matching pattern does not start with '!'.\n   */\n  fileMatch: string[];\n  /*\n   * The schema for the given URI.\n   * If no schema is provided, the schema will be fetched with the schema request service (if available).\n   */\n  schema?: JSONSchema;\n}\n\n```\n`ISchemaAssociations`\n  - keys: a file names or file path (separated by `/`). `*` can be used as a wildcard.\n  - values: An array of schema URLs\n\nNotification:\n- method: 'json/schemaContent'\n- params: `string` the URL of the schema that has changed.\n\n### Item Limit\n\nIf the setting `resultLimit` is set, the JSON language server will limit the number of folding ranges and document symbols computed.\nWhen the limit is reached, a notification `json/resultLimitReached` is sent that can be shown that can be shown to the user.\n\nNotification:\n- method: 'json/resultLimitReached'\n- params: a human readable string to show to the user.\n\n\n## Try\n\nThe JSON language server is shipped with [Visual Studio Code](https://code.visualstudio.com/) as part of the built-in VSCode extension `json-language-features`. The server is started when the first JSON file is opened. The [VSCode JSON documentation](https://code.visualstudio.com/docs/languages/json) for detailed information on the user experience and has more information on how to configure the language support.\n\n## Integrate\n\nIf you plan to integrate the JSON language server into an editor and IDE, check out [this page](https://microsoft.github.io/language-server-protocol/implementors/tools/) if there's already an LSP client integration available.\n\nYou can also launch the language server as a command and connect to it.\nFor that, install the `vscode-json-languageserver` npm module:\n\n`npm install -g vscode-json-languageserver`\n\nStart the language server with the `vscode-json-languageserver` command. Use a command line argument to specify the preferred communication channel:\n\n```\nvscode-json-languageserver --node-ipc\nvscode-json-languageserver --stdio\nvscode-json-languageserver --socket=<port>\n```\n\nTo connect to the server from NodeJS, see Remy Suen's great write-up on [how to communicate with the server](https://github.com/rcjsuen/dockerfile-language-server-nodejs#communicating-with-the-server) through the available communication channels.\n\n## Participate\n\nThe source code of the JSON language server can be found in the [VSCode repository](https://github.com/microsoft/vscode) at [extensions/json-language-features/server](https://github.com/microsoft/vscode/tree/master/extensions/json-language-features/server).\n\nFile issues and pull requests in the [VSCode GitHub Issues](https://github.com/microsoft/vscode/issues). See the document [How to Contribute](https://github.com/microsoft/vscode/wiki/How-to-Contribute) on how to build and run from source.\n\nMost of the functionality of the server is located in libraries:\n- [jsonc-parser](https://github.com/microsoft/node-jsonc-parser) contains the JSON parser and scanner.\n- [vscode-json-languageservice](https://github.com/microsoft/vscode-json-languageservice) contains the implementation of all features as a re-usable library.\n- [vscode-languageserver-node](https://github.com/microsoft/vscode-languageserver-node) contains the implementation of language server for NodeJS.\n\nHelp on any of these projects is very welcome.\n\n## Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n## License\n\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nLicensed under the [MIT](https://github.com/microsoft/vscode/blob/master/LICENSE.txt) License.\n","readmeFilename":"README.md"}